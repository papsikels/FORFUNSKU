// ==UserScript==
// @name         PANCAKE
// @namespace    http://tampermonkey.net/
// @version      3.3
// @description  Firebase dashboard with Add, Edit, Delete, and Search features
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const firebaseConfig = {
        apiKey: "AIzaSyB5k4ktm_k0FL2Esq2szyEz6uQe5d6smPI",
        authDomain: "forfun-5584e.firebaseapp.com",
        databaseURL: "https://forfun-5584e-default-rtdb.firebaseio.com",
        projectId: "forfun-5584e",
        storageBucket: "forfun-5584e.appspot.com",
        messagingSenderId: "103887112043",
        appId: "1:103887112043:web:72337f8a4fbe9944996e2e",
        measurementId: "G-MRHBC0VM1E"
    };

    let detectionInterval;
    let clockInterval;

    function loadFirebaseScripts(callback) {
        const scripts = [
            "https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js",
            "https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"
        ];
        let loaded = 0;
        scripts.forEach(src => {
            const script = document.createElement("script");
            script.src = src;
            script.onload = () => {
                loaded++;
                if (loaded === scripts.length) callback();
            };
            document.head.appendChild(script);
        });
    }

    function waitForFirebase(callback) {
        const interval = setInterval(() => {
            if (window.firebase && firebase.apps) {
                clearInterval(interval);
                callback();
            }
        }, 100);
    }

    function makeDraggable(element) {
        let isDragging = false;
        let offsetX, offsetY;

        element.addEventListener('mousedown', (e) => {
            isDragging = true;
            offsetX = e.clientX - element.offsetLeft;
            offsetY = e.clientY - element.offsetTop;
            element.style.cursor = 'grabbing';
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                element.style.left = (e.clientX - offsetX) + 'px';
                element.style.top = (e.clientY - offsetY) + 'px';
            }
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
            element.style.cursor = 'move';
        });
    }

    function hideElement(element) {
        if (element) element.style.display = 'none';
    }

    function showElement(element) {
        if (element) element.style.display = 'block';
    }

   function createDashboard() {
    const dashboard = document.createElement('div');
    dashboard.id = 'dashboard';
    dashboard.style = `
        position: fixed;
        top: 50px;
        left: 50px;
        width: 250px;
        background: #333;
        color: white;
        border: 1px solid white;
        padding: 20px;
        border-radius: 10px;
        font-family: Arial;
        z-index: 9999;
    `;
dashboard.innerHTML = `
    <div style="position: relative;">
        <span id="exitBtn" style="
            position: absolute;
            top: 0;
            right: 0;
            cursor: pointer;
            color: white;
            background: None;
            padding: 5px 10px;
            font-size: 18px;
            line-height: 1;
            font-weight: bold;
        ">√ó</span>
        <strong style="font-size: 16px; line-height: 1.5;">Dashboard</strong><br><br>
        <button id="addItemBtn" style="width:100%; margin-bottom: 10px; background:#444; color:white;">Add Item</button>
        <button id="updateBtn" style="width:100%; margin-bottom: 10px; background:#444; color:white;">Update</button>
        <button id="startBtn" style="width:100%; margin-bottom: 10px; background:#444; color:white;">Start</button>
    </div>
`;

    document.body.appendChild(dashboard);
    makeDraggable(dashboard);

    document.getElementById('addItemBtn').addEventListener('click', () => {
        hideElement(dashboard);
        showElement(document.getElementById('addItemForm'));
    });

    document.getElementById('updateBtn').addEventListener('click', () => {
        hideElement(dashboard);
        refreshItemList();
        showElement(document.getElementById('updateForm'));
    });

    document.getElementById('startBtn').addEventListener('click', () => {
        hideElement(dashboard);
        showElement(document.getElementById('startPanel'));
        updateClock();
        clockInterval = setInterval(updateClock, 1000);
        detectAndDisplaySKU(); // Initial detection
        if (detectionInterval) clearInterval(detectionInterval);
        detectionInterval = setInterval(detectAndDisplaySKU, 2000); // Periodic checks
    });

    document.getElementById('exitBtn').addEventListener('click', () => {
        const confirmExit = confirm("Are you sure you want to exit the application?");
        if (confirmExit) {
            hideElement(dashboard);
        }
    });
}


    function createAddItemForm() {
        const form = document.createElement('div');
        form.id = 'addItemForm';
        form.style = `
            position: fixed;
            top: 150px;
            left: 100px;
            width: 250px;
            background: black;
            color: white;
            border: 1px solid white;
            padding: 10px;
            border-radius: 10px;
            font-family: Arial;
            z-index: 9999;
            display: none;
            cursor: move;
        `;
        form.innerHTML = `
            <strong>Add Item</strong><br>
            <input type="text" id="itemName" placeholder="Item name" style="width:100%; margin-top:5px; background:white; color:black;">
            <input type="text" id="itemValue" placeholder="Value" style="width:100%; margin-top:5px; background:white; color:black;">
            <button id="saveBtn" style="margin-top:10px; width:100%; background:#444; color:white;">Save</button><br><br>
            <button id="backBtn" style="width:100%; background:#444; color:white;">Back</button>
        `;
        document.body.appendChild(form);
        makeDraggable(form);

        document.getElementById('saveBtn').addEventListener('click', saveItem);
        document.getElementById('backBtn').addEventListener('click', () => {
            hideElement(form);
            showElement(document.getElementById('dashboard'));
        });
    }

    function saveItem() {
        const name = document.getElementById('itemName').value.trim();
        const value = document.getElementById('itemValue').value.trim();
        if (!name || !value) return alert("Both fields are required!");

        const db = firebase.database();
        const itemsRef = db.ref('items');

        itemsRef.orderByChild('name').equalTo(name).once('value', snapshot => {
            if (snapshot.exists()) {
                alert("‚ùå Name already exists!");
            } else {
                itemsRef.push({ name, value })
                    .then(() => {
                        alert("‚úÖ Saved!");
                        document.getElementById('itemName').value = '';
                        document.getElementById('itemValue').value = '';
                    });
            }
        });
    }

function createUpdateForm() {
    const updateForm = document.createElement('div');
    updateForm.id = 'updateForm';
    updateForm.style = `
        position: fixed;
        top: 150px;
        left: 350px;
        width: 350px;
        max-height: 500px;
        overflow-y: auto;
        background: #222;
        color: white;
        border: 1px solid white;
        padding: 10px;
        border-radius: 10px;
        font-family: Arial;
        z-index: 9999;
        display: none;
        cursor: move;
    `;

    updateForm.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <button id="backFromUpdateFormBtn" style="background: none; border: none; color: white; font-size: 20px;">‚Üê</button>
            <strong>Update Items</strong>
            <span></span> <!-- spacer to keep layout balanced -->
        </div>
        <input type="text" id="searchInput" placeholder="Search item..." style="width: 100%; margin: 10px 0; color:black;"><br>
        <div id="itemList"></div>
    `;

    document.body.appendChild(updateForm);
    makeDraggable(updateForm);

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', refreshItemList);

    document.getElementById('backFromUpdateFormBtn').addEventListener('click', () => {
        hideElement(updateForm);
        showElement(document.getElementById('dashboard'));
    });
}


    function refreshItemList() {
        const db = firebase.database();
        const itemsRef = db.ref('items');
        const list = document.getElementById('itemList');
        const filter = document.getElementById('searchInput').value.toLowerCase();

        itemsRef.once('value', snapshot => {
            list.innerHTML = '';
            snapshot.forEach(child => {
                const item = child.val();
                const key = child.key;

                if (item.name.toLowerCase().includes(filter)) {
                    const div = document.createElement('div');
                    div.style.marginBottom = '5px';
                    div.innerHTML = `
                        <input value="${item.name}" data-key="${key}" style="width: 40%; color:black;">
                        <input value="${item.value}" data-key="${key}" style="width: 30%; color:black;">
                        <button data-key="${key}" class="updateSingleBtn">üíæ</button>
                        <button data-key="${key}" class="deleteSingleBtn">‚ùå</button>
                    `;
                    list.appendChild(div);
                }
            });

            list.querySelectorAll('.updateSingleBtn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const key = btn.getAttribute('data-key');
                    const inputs = btn.parentElement.querySelectorAll('input');
                    const updatedName = inputs[0].value;
                    const updatedValue = inputs[1].value;
                    db.ref('items/' + key).update({ name: updatedName, value: updatedValue });
                });
            });

            list.querySelectorAll('.deleteSingleBtn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const key = btn.getAttribute('data-key');
                    if (confirm("Delete this item?")) {
                        db.ref('items/' + key).remove();
                        refreshItemList();
                    }
                });
            });
        });
    }

function createStartPanel() {
    const startPanel = document.createElement('div');
    startPanel.id = 'startPanel';
    startPanel.style = `
        position: fixed;
        top: 150px;
        left: 100px;
        width: 250px;
        min-width: 200px;
        max-width: 400px;
        min-height: 180px;
        background: #333;
        color: white;
        border: 1px solid white;
        padding: 10px;
        border-radius: 10px;
        font-family: Arial;
        z-index: 9999;
        display: none;
        cursor: move;
        resize: both;
        overflow: auto;
        box-sizing: border-box;
    `;
    startPanel.innerHTML = `
        <div class="panel-header" style="position: relative; display: flex; flex-direction: column; align-items: center; margin-bottom: 10px;">
            <div id="updateNotice" style="font-size: 14px; font-weight: bold; color: yellow; display: none; margin-bottom: 5px;">‚ö† UPDATE ‚ö†</div>
            <div style="display: flex; justify-content: space-between; width: 100%; align-items: center;">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <button id="backFromStartBtn" style="background: none; border: none; color: white; font-size: 20px;">‚Üê</button>
                    <button id="toggleEyeBtn" style="background: none; border: none; color: white; font-size: 16px; cursor: pointer;">üëÅ</button>
                </div>
                <div id="clockDisplay" style="font-size: 14px;"></div>
            </div>
            <div class="resize-handle" style="position: absolute; right: 0; bottom: -10px; width: 20px; height: 20px; cursor: se-resize; z-index: 10000;">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="white">
                    <path d="M20 20H0V0h20z" fill="none"/>
                    <path d="M8 16H4v-4l4 4zm4-4h-4v4l4-4zm4-4h-4v4l4-4z"/>
                </svg>
            </div>
        </div>
        <div style="margin-bottom: 10px;">
            <div style="font-size: 12px; color: #aaa;">Detected Name:</div>
            <div id="detectedName" style="font-weight: bold; word-break: break-word;">No name detected</div>
        </div>
        <div style="margin-bottom: 10px;">
            <div style="font-size: 12px; color: #aaa;">SKU Value:</div>
            <div id="skuValue" style="font-weight: bold; word-break: break-word;">No detected SKU</div>
        </div>
        <button id="copyBtn" style="width:100%; background:#444; color:white; margin-top: auto;">Copy SKU</button>
    `;
    document.body.appendChild(startPanel);
    makeDraggable(startPanel);

    // Add custom resize handle functionality
    const resizeHandle = startPanel.querySelector('.resize-handle');
    let isResizing = false;
    let startX, startY, startWidth, startHeight;

    resizeHandle.addEventListener('mousedown', function(e) {
        e.preventDefault();
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        startWidth = parseInt(document.defaultView.getComputedStyle(startPanel).width, 10);
        startHeight = parseInt(document.defaultView.getComputedStyle(startPanel).height, 10);
        document.documentElement.style.cursor = 'se-resize';
        startPanel.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', function(e) {
        if (!isResizing) return;

        const width = startWidth + e.clientX - startX;
        const height = startHeight + e.clientY - startY;

        startPanel.style.width = Math.max(200, Math.min(400, width)) + 'px';
        startPanel.style.height = Math.max(180, height) + 'px';
    });

    document.addEventListener('mouseup', function() {
        if (!isResizing) return;
        isResizing = false;
        document.documentElement.style.cursor = '';
        startPanel.style.userSelect = '';
    });

    // Panel functionality remains the same
    let currentSKUListener = null;

    document.getElementById('backFromStartBtn').addEventListener('click', () => {
        if (detectionInterval) clearInterval(detectionInterval);
        if (clockInterval) clearInterval(clockInterval);
        if (currentSKUListener) {
            currentSKUListener.off();
            currentSKUListener = null;
        }
        hideElement(startPanel);
        showElement(document.getElementById('dashboard'));
    });

let copyTimeout = null;

   function normalizeText(text) {
    return text
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/√±/g, 'n')
        .replace(/-/g, ' ')
        .replace(/[().]/g, ' ')
        .replace(/\s+/g, ' ')
        .trim()
        .toLowerCase();
   }


    function copySKU() {
        const skuValue = document.getElementById('skuValue').textContent;
        if (skuValue && skuValue !== "No detected SKU") {
            navigator.clipboard.writeText(skuValue)
                .then(() => {
                    const copyBtn = document.getElementById('copyBtn');
                    copyBtn.textContent = "Copied!";
                    if (copyTimeout) clearTimeout(copyTimeout);  // clear previous timer
                    copyTimeout = setTimeout(() => {
                        copyBtn.textContent = "Copy SKU";
                        copyTimeout = null;
                    }, 2000);
                })
                .catch(err => console.error('Failed to copy: ', err));
        }
    }



    // Event listeners
    document.getElementById('copyBtn').addEventListener('click', copySKU);

    document.addEventListener('keydown', (e) => {
        if (e.altKey && e.key.toLowerCase() === 'x') {
            e.preventDefault();
            copySKU();
        }
    });

    function updateClock() {
        const now = new Date();
        const clock = document.getElementById('clockDisplay');
        clock.textContent = now.toLocaleTimeString();
    }

    const clockInterval = setInterval(updateClock, 1000);
    updateClock();

    function checkTimeAndUpdatePanel() {
        const now = new Date();
        const minutes = now.getMinutes();
        const updateNotice = document.getElementById('updateNotice');

        const isBlinkTime = (minutes >= 28 && minutes < 31) || (minutes >= 58 || minutes < 1);

        if (isBlinkTime) {
            startPanel.style.animation = 'blinkRedYellow 1s infinite';
            updateNotice.style.display = 'block';
        } else {
            startPanel.style.animation = 'none';
            startPanel.style.background = '#333';
            updateNotice.style.display = 'none';
        }
    }

    setInterval(checkTimeAndUpdatePanel, 1000);

    // Create second panel function
function createSecondPanel() {
    const secondPanel = document.createElement('div');
    secondPanel.id = 'secondPanel';
    secondPanel.style = `
        position: fixed;
        top: 150px;
        left: 370px;
        width: 350px;
        min-width: 300px;
        max-width: 500px;
        min-height: 250px;
        background: #444;
        color: white;
        border: 1px solid white;
        padding: 10px;
        border-radius: 10px;
        font-family: Arial;
        z-index: 9998;
        display: none;
        cursor: move;
        resize: both;
        overflow: auto;
        box-sizing: border-box;
    `;
    secondPanel.innerHTML = `
        <div class="panel-header" style="position: relative; display: flex; flex-direction: column; align-items: center; margin-bottom: 10px;">
            <div style="display: flex; justify-content: space-between; width: 100%; align-items: center;">
                <div style="font-weight: bold;">Delivery Information</div>
                <button id="closeSecondPanelBtn" style="background: none; border: none; color: white; font-size: 16px; cursor: pointer;">‚úï</button>
            </div>
            <div class="resize-handle" style="position: absolute; right: 0; bottom: -10px; width: 20px; height: 20px; cursor: se-resize; z-index: 10000;">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="white">
                    <path d="M20 20H0V0h20z" fill="none"/>
                    <path d="M8 16H4v-4l4 4zm4-4h-4v4l4-4zm4-4h-4v4l4-4z"/>
                </svg>
            </div>
        </div>

        <div style="margin-bottom: 15px;">
            <input type="text" id="deliverySearch" placeholder="Search address..."
                   style="width: 100%; padding: 5px; border-radius: 4px; border: none; background: #555; color: white;">
        </div>

        <div style="display: flex; justify-content: space-between; margin-bottom: 10px; font-size: 12px;">
            <div>Total: <span id="totalCount">0</span></div>
            <div>D2D: <span id="d2dCount">0</span></div>
            <div>NOD2D: <span id="nod2dCount">0</span></div>
        </div>

        <div style="overflow-y: auto; max-height: 300px;">
            <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
                <thead>
                    <tr style="background: #555; position: sticky; top: 0;">
                        <th style="padding: 5px; text-align: left; border-bottom: 1px solid #777;">Address</th>
                        <th style="padding: 5px; text-align: center; border-bottom: 1px solid #777; width: 80px;">Type</th>
                        <th style="padding: 5px; text-align: center; border-bottom: 1px solid #777; width: 80px;">Days</th>
                    </tr>
                </thead>
                <tbody id="deliveryTableBody">
                    <!-- Search results here -->
                </tbody>
            </table>
        </div>
    `;
    document.body.appendChild(secondPanel);
    makeDraggable(secondPanel);

    // Resizing code (unchanged)
    const resizeHandle = secondPanel.querySelector('.resize-handle');
    let isResizing = false;
    let startX, startY, startWidth, startHeight;

    resizeHandle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        startWidth = parseInt(getComputedStyle(secondPanel).width, 10);
        startHeight = parseInt(getComputedStyle(secondPanel).height, 10);
        document.documentElement.style.cursor = 'se-resize';
        secondPanel.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isResizing) return;
        secondPanel.style.width = Math.max(300, Math.min(500, startWidth + e.clientX - startX)) + 'px';
        secondPanel.style.height = Math.max(250, startHeight + e.clientY - startY) + 'px';
    });

    document.addEventListener('mouseup', () => {
        if (!isResizing) return;
        isResizing = false;
        document.documentElement.style.cursor = '';
        secondPanel.style.userSelect = '';
    });

    document.addEventListener('keydown', (e) => {
    if (e.altKey && e.key.toLowerCase() === 'z') {
        const panel = document.getElementById('secondPanel');
        const toggleBtn = document.getElementById('toggleEyeBtn');

        if (panel) {
            if (panel.style.display === 'none' || panel.style.display === '') {
                panel.style.display = 'block';
                if (toggleBtn) toggleBtn.textContent = 'üëÅÔ∏è‚Äçüó®Ô∏è'; // Optional icon change
            } else {
                panel.style.display = 'none';
                if (toggleBtn) toggleBtn.textContent = 'üëÅ';
            }
        }
    }
});


    document.getElementById('closeSecondPanelBtn').addEventListener('click', () => {
        secondPanel.style.display = 'none';
        document.getElementById('toggleEyeBtn').textContent = 'üëÅ';
    });

    let allData = [];

  function loadDeliveryDataOnce() {
    // Fetch location data from GitHub raw .txt
    fetch('https://raw.githubusercontent.com/papsikels/FORFUNSKU/refs/heads/main/LOCATION.txt')
        .then(response => response.text())
        .then(text => {
            // Split lines, trim empty lines
            const lines = text.trim().split('\n');

            // Map each line into an object with full_address and category (D2D or NOD2D)
            allData = lines.map(line => {
                // Example line: "Ilocos Norte Adams Adams (Pob.)	D2D"
                // Split by tab or multiple spaces
                let parts = line.trim().split(/\s+/);
                let category = parts.pop(); // last part is D2D or NOD2D
                let full_address = parts.join(' ');
                return { full_address, category };
            });

        })
        .catch(err => {
            console.error('Failed to load location data:', err);
        });
}

    // debounce helper function
    function debounce(func, delay) {
        let timeoutId;
        return function(...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }



function renderFilteredData(term = '') {
    const tableBody = document.getElementById('deliveryTableBody');
    tableBody.innerHTML = '';

    // Kapag walang laman ang search term, wag mag-display ng kahit ano, clear lang count
    if (term.trim() === '') {
        document.getElementById('totalCount').textContent = 0;
        document.getElementById('d2dCount').textContent = 0;
        document.getElementById('nod2dCount').textContent = 0;
        return;
    }

    const fragment = document.createDocumentFragment();

    let totalCount = 0;
    let d2dCount = 0;
    let nod2dCount = 0;

    const normalizedTerm = normalizeText(term);

    let displayedCount = 0;
    const maxDisplay = 100;

   for (let i = 0; i < allData.length; i++) {
    const item = allData[i];
    const address = item.full_address || '';
    let type = item.category || '';
    let days = getDeliveryDays(address);

    const normalizedAddress = normalizeText(address);
    const normalizedType = type.trim().toUpperCase();

    if (normalizedType === 'NOD2D') {
        days = '10-21 days';
    }

    if (normalizedAddress.includes(normalizedTerm)) {
        totalCount++;
        if (normalizedType === 'D2D') d2dCount++;
        if (normalizedType === 'NOD2D') nod2dCount++;

        if (displayedCount < maxDisplay) {
            const row = document.createElement('tr');
            const colorStyle = normalizedType === 'D2D' ? 'background: #006400; color: white;' :
                              normalizedType === 'NOD2D' ? 'background: #8B0000; color: white;' : '';

            row.innerHTML = `
                <td style="padding: 5px; border-bottom: 1px solid #777; ${colorStyle}">${address}</td>
                <td style="padding: 5px; text-align: center; border-bottom: 1px solid #777; ${colorStyle}">${type.toUpperCase()}</td>
                <td style="padding: 5px; text-align: center; border-bottom: 1px solid #777;">${days}</td>
            `;
            fragment.appendChild(row);
            displayedCount++;
        }
    }
}


    tableBody.appendChild(fragment);

    document.getElementById('totalCount').textContent = totalCount;
    document.getElementById('d2dCount').textContent = d2dCount;
    document.getElementById('nod2dCount').textContent = nod2dCount;
}





    // Debounced version of renderFilteredData
    const debouncedRender = debounce(renderFilteredData, 300);

    // Search listener with debounce
   document.getElementById('deliverySearch').addEventListener('input', (e) => {
    const value = e.target.value.trim();
    if (value.length > 0) {
        debouncedRender(value);
    } else {
        // Optional: clear table if walang search input
        document.getElementById('deliveryTableBody').innerHTML = '';
        document.getElementById('totalCount').textContent = '0';
        document.getElementById('d2dCount').textContent = '0';
        document.getElementById('nod2dCount').textContent = '0';
    }
});

    // Load once when panel becomes visible
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.attributeName === 'style' && secondPanel.style.display === 'block') {
                loadDeliveryDataOnce();
            }
        });
    });

    observer.observe(secondPanel, {
        attributes: true,
        attributeFilter: ['style']
    });
}


createSecondPanel();



function getDeliveryDays(address) {
    const lowerAddress = address.toLowerCase();

    // Combine all provinces with tag: Luzon/VisMin/Islands
    const provinceTags = [
        ...luzon.map(p => ({ name: p, region: '1-4 days' })),
        ...vismin.map(p => ({ name: p, region: '3-8 days' })),
        ...islands.map(p => ({ name: p, region: '10-21 days' })),
    ];

    let matched = null;
    let earliestIndex = Infinity;

    for (let { name, region } of provinceTags) {
        const index = lowerAddress.indexOf(name.toLowerCase());
        if (index !== -1 && index < earliestIndex) {
            matched = region;
            earliestIndex = index;
        }
    }

    return matched || 'N/A';
}





const luzon = [
  "Abra", "Albay", "Apayao", "Aurora", "Bataan", "Batangas", "Benguet", "Bulacan",
  "Cagayan", "Camarines Norte", "Camarines Sur", "Catanduanes", "Cavite", "Ifugao",
  "Ilocos Norte", "Ilocos Sur", "Isabela", "Kalinga", "La Union", "Laguna", "Metro Manila", "Marinduque",
  "Masbate", "Nueva Ecija", "Nueva Vizcaya", "Occidental Mindoro", "Oriental Mindoro",
  "Pampanga", "Pangasinan", "Quezon", "Quirino", "Rizal", "Sorsogon", "Tarlac", "Zambales"
];

const vismin = [
  "Agusan Del Norte", "Agusan Del Sur", "Aklan", "Antique", "Biliran", "Bukidnon", "Capiz",
  "Cebu", "Cotabato", "Davao De Oro", "Davao Del Norte", "Davao Del Sur", "Davao Occidental",
  "Davao Oriental", "Eastern Samar", "Guimaras", "Iloilo", "Lanao Del Norte", "Lanao Del Sur",
  "Leyte", "Maguindanao", "Misamis Occidental", "Misamis Oriental", "Negros Occidental",
  "Negros Oriental", "Northern Samar", "Romblon", "Southern Leyte", "Sultan Kudarat",
  "Surigao Del Norte", "Surigao Del Sur", "Western Samar", "Zamboanga Del Norte",
  "Zamboanga Del Sur", "Zamboanga Sibugay"
];

const islands = [
  "Basilan", "Batanes", "Bohol", "Camiguin", "Dinagat Islands", "Mountain Province",
  "Palawan", "Sarangani", "Siquijor", "South Cotabato", "Sulu", "Tawi Tawi"
];


document.addEventListener('keydown', async (e) => {
    if (e.altKey && e.key.toLowerCase() === 'a') {
        try {
            const tag = document.querySelector('.tag-combo');
            if (!tag) return;

            // Kunin ang buong voucher text (value)
            const value = tag.textContent.trim().split(':')[0]; // example: "3FlawlessCream=199"
            if (!value) return;

            // Kunin ang detected name sa page (halimbawa nasa #detectedName element)
            const detectedNameElement = document.getElementById('detectedName');
            if (!detectedNameElement) return;
            const name = detectedNameElement.textContent.trim();

            if (!name) {
                alert("No detected name found.");
                return;
            }

            const skuValueElement = document.getElementById('skuValue');

            const db = firebase.database();
            const itemsRef = db.ref('items');

            // Check kung may existing name na sa database
            const snapshot = await itemsRef.orderByChild('name').equalTo(name).once('value');

            if (snapshot.exists()) {
                // Name exists, huwag i-save ulit
                if (skuValueElement) {
                    const existingValue = Object.values(snapshot.val())[0].value;
                    skuValueElement.textContent = existingValue;
                }
                console.log(`"${name}" already exists in database. Skipping save.`);
                return;
            }

            // Save kung wala pang ganitong name
            await itemsRef.push({ name, value });
            if (skuValueElement) {
                skuValueElement.textContent = value;
            }
            alert(`‚úÖ Saved: ${name} = ${value}`);

        } catch (error) {
            console.error("Auto-detect/save error:", error);
        }
    }
});


// Eye button toggle functionality
document.getElementById('toggleEyeBtn').addEventListener('click', () => {
    const secondPanel = document.getElementById('secondPanel');
    if (secondPanel.style.display === 'none' || !secondPanel.style.display) {
        secondPanel.style.display = 'block';
        document.getElementById('toggleEyeBtn').textContent = 'üëÅÔ∏è‚Äçüó®';
    } else {
        secondPanel.style.display = 'none';
        document.getElementById('toggleEyeBtn').textContent = 'üëÅ';
    }
});

const style = document.createElement('style');
style.innerHTML = `
    @keyframes blinkRedYellow {
        0% { background-color: red; }
        50% { background-color: yellow; }
        100% { background-color: red; }
    }
    #startPanel::-webkit-resizer, #secondPanel::-webkit-resizer {
        background: transparent;
    }
    .resize-handle:hover {
        opacity: 0.8;
    }
    #startPanel, #secondPanel {
        transition: width 0.1s ease, height 0.1s ease;
    }
    #toggleEyeBtn:hover {
        transform: scale(1.2);
    }
    #deliverySearch:focus {
        outline: 1px solid #4CAF50;
    }
    #deliveryTableBody tr:hover {
        background: #555;
    }
`;
document.head.appendChild(style);
}

    function updateClock() {
        const clock = document.getElementById('clockDisplay');
        const now = new Date();
        clock.textContent = now.toLocaleTimeString();
    }



function detectAndDisplaySKU() {
    try {
        const startPanel = document.getElementById('startPanel');
        if (!startPanel || startPanel.style.display !== 'block') return;

        // First try method 1: From known span span
        let nameElements = document.querySelectorAll('.text-ellipsis.text-other-info span span');
        let detectedName = "No name detected";
        let found = false;

        nameElements.forEach(element => {
            if (element.textContent && element.textContent.trim()) {
                detectedName = element.textContent.trim();
                found = true;
            }
        });

        // If not found, try method 2: inside .avatar > div
        if (!found) {
            const avatarNameElements = document.querySelectorAll('.avatar > div:last-child');
            avatarNameElements.forEach(element => {
                if (element.textContent && element.textContent.trim()) {
                    detectedName = element.textContent.trim();
                    found = true;
                }
            });
        }

        // Update detected name in UI
        const detectedNameElement = document.getElementById('detectedName');
        if (detectedNameElement && detectedNameElement.textContent !== detectedName) {
            detectedNameElement.textContent = detectedName;
        }

        // Firebase check
        if (found) {
            const db = firebase.database();
            const itemsRef = db.ref('items');

            itemsRef.orderByChild('name').equalTo(detectedName).on('value', snapshot => {
                if (startPanel.style.display === 'block') {
                    const skuValueElement = document.getElementById('skuValue');
                    if (snapshot.exists()) {
                        let value = "No value found";
                        snapshot.forEach(child => {
                            value = child.val().value;
                        });
                        if (skuValueElement && skuValueElement.textContent !== value) {
                            skuValueElement.textContent = value;
                        }
                    } else {
                        if (skuValueElement && skuValueElement.textContent !== "No detected SKU") {
                            skuValueElement.textContent = "No detected SKU";
                        }
                    }
                }
            });
        } else {
            const skuValueElement = document.getElementById('skuValue');
            if (skuValueElement && skuValueElement.textContent !== "No detected SKU") {
                skuValueElement.textContent = "No detected SKU";
            }
        }
    } catch (error) {
        console.error("Detection error:", error);
    }
}

    loadFirebaseScripts(() => {
        waitForFirebase(() => {
            firebase.initializeApp(firebaseConfig);
            createDashboard();
            createAddItemForm();
            createUpdateForm();
            createStartPanel();
        });
    });

})();
